{"ast":null,"code":"var _jsxFileName = \"/home/sgorbounov/Documents/BioSemanticViz/taxonium-wrapper/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport TaxoniumComponent from 'taxonium-component';\n\n// Define the expected message structure from the parent window\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [treeData, setTreeData] = useState(null);\n  const [newick, setNewick] = useState('');\n  const [loaded, setLoaded] = useState(false);\n\n  // When the component mounts, notify the parent window\n  useEffect(() => {\n    // Send a message to the parent window that the iframe is loaded\n    window.parent.postMessage({\n      type: 'TAXONIUM_IFRAME_LOADED'\n    }, '*');\n\n    // Listen for messages from the parent window\n    const handleMessage = event => {\n      const data = event.data;\n\n      // Check if the message is for initializing Taxonium\n      if ((data === null || data === void 0 ? void 0 : data.type) === 'INIT_TAXONIUM' && data.treeData) {\n        console.log('Received tree data from parent window');\n        setTreeData(data.treeData);\n        if (data.newick) {\n          setNewick(data.newick);\n        }\n\n        // Notify the parent that we've received the data\n        window.parent.postMessage({\n          type: 'TAXONIUM_READY'\n        }, '*');\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    setLoaded(true);\n\n    // Clean up the event listener when component unmounts\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: loaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '0px',\n        width: '100%',\n        height: '100%'\n      },\n      children: treeData ? /*#__PURE__*/_jsxDEV(TaxoniumComponent, {\n        width: \"100%\",\n        height: \"100%\",\n        data: treeData,\n        newick: newick,\n        customNavbar: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: '#666'\n        },\n        children: \"Waiting for tree data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"5OcwYnDvOlMq3jjBr8iZ0qPXtFU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","TaxoniumComponent","jsxDEV","_jsxDEV","App","_s","treeData","setTreeData","newick","setNewick","loaded","setLoaded","window","parent","postMessage","type","handleMessage","event","data","console","log","addEventListener","removeEventListener","style","width","height","children","padding","customNavbar","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","justifyContent","color","_c","$RefreshReg$"],"sources":["/home/sgorbounov/Documents/BioSemanticViz/taxonium-wrapper/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TaxoniumComponent from 'taxonium-component';\n\n// Define the expected message structure from the parent window\ninterface TreeDataMessage {\n  type: string;\n  treeData?: any;\n  newick?: string;\n}\n\nconst App: React.FC = () => {\n  const [treeData, setTreeData] = useState<any>(null);\n  const [newick, setNewick] = useState<string>('');\n  const [loaded, setLoaded] = useState(false);\n\n  // When the component mounts, notify the parent window\n  useEffect(() => {\n    // Send a message to the parent window that the iframe is loaded\n    window.parent.postMessage({ type: 'TAXONIUM_IFRAME_LOADED' }, '*');\n    \n    // Listen for messages from the parent window\n    const handleMessage = (event: MessageEvent) => {\n      const data = event.data as TreeDataMessage;\n      \n      // Check if the message is for initializing Taxonium\n      if (data?.type === 'INIT_TAXONIUM' && data.treeData) {\n        console.log('Received tree data from parent window');\n        setTreeData(data.treeData);\n        if (data.newick) {\n          setNewick(data.newick);\n        }\n        \n        // Notify the parent that we've received the data\n        window.parent.postMessage({ type: 'TAXONIUM_READY' }, '*');\n      }\n    };\n    \n    window.addEventListener('message', handleMessage);\n    setLoaded(true);\n    \n    // Clean up the event listener when component unmounts\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      {loaded && (\n        <div style={{ padding: '0px', width: '100%', height: '100%' }}>\n          {treeData ? (\n            <TaxoniumComponent \n              width=\"100%\"\n              height=\"100%\"\n              data={treeData} \n              newick={newick} \n              customNavbar={null}\n            />\n          ) : (\n            <div style={{ \n              width: '100%', \n              height: '100%', \n              display: 'flex', \n              alignItems: 'center', \n              justifyContent: 'center',\n              color: '#666'\n            }}>\n              Waiting for tree data...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,oBAAoB;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAM,IAAI,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAS,EAAE,CAAC;EAChD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd;IACAa,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC;MAAEC,IAAI,EAAE;IAAyB,CAAC,EAAE,GAAG,CAAC;;IAElE;IACA,MAAMC,aAAa,GAAIC,KAAmB,IAAK;MAC7C,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAuB;;MAE1C;MACA,IAAI,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEH,IAAI,MAAK,eAAe,IAAIG,IAAI,CAACZ,QAAQ,EAAE;QACnDa,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpDb,WAAW,CAACW,IAAI,CAACZ,QAAQ,CAAC;QAC1B,IAAIY,IAAI,CAACV,MAAM,EAAE;UACfC,SAAS,CAACS,IAAI,CAACV,MAAM,CAAC;QACxB;;QAEA;QACAI,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC;UAAEC,IAAI,EAAE;QAAiB,CAAC,EAAE,GAAG,CAAC;MAC5D;IACF,CAAC;IAEDH,MAAM,CAACS,gBAAgB,CAAC,SAAS,EAAEL,aAAa,CAAC;IACjDL,SAAS,CAAC,IAAI,CAAC;;IAEf;IACA,OAAO,MAAM;MACXC,MAAM,CAACU,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAKoB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,EAC3ChB,MAAM,iBACLP,OAAA;MAAKoB,KAAK,EAAE;QAAEI,OAAO,EAAE,KAAK;QAAEH,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO,CAAE;MAAAC,QAAA,EAC3DpB,QAAQ,gBACPH,OAAA,CAACF,iBAAiB;QAChBuB,KAAK,EAAC,MAAM;QACZC,MAAM,EAAC,MAAM;QACbP,IAAI,EAAEZ,QAAS;QACfE,MAAM,EAAEA,MAAO;QACfoB,YAAY,EAAE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpB,CAAC,gBAEF7B,OAAA;QAAKoB,KAAK,EAAE;UACVC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,MAAM;UACdQ,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE,QAAQ;UACpBC,cAAc,EAAE,QAAQ;UACxBC,KAAK,EAAE;QACT,CAAE;QAAAV,QAAA,EAAC;MAEH;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAhEID,GAAa;AAAAiC,EAAA,GAAbjC,GAAa;AAkEnB,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}